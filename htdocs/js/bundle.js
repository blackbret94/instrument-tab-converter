(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.modules = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";module.exports={TabTransposerController:require("./tab-transposer-controller")};

},{"./tab-transposer-controller":3}],2:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}require("core-js/modules/es.array.concat");var TabSaver=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"save",value:function(){var e=this.formatFile(this.getSongTitle(),this.getArtistName(),this.getInstrument(),this.getTab()),t=new Blob([e],{type:"text/plain;charset=utf-8"});saveAs(t,this.getFileName())}},{key:"getFileName",value:function(){return document.getElementById("save-name").value}},{key:"getArtistName",value:function(){return document.getElementById("artist-name").value}},{key:"getSongTitle",value:function(){return document.getElementById("song-title").value}},{key:"getInstrument",value:function(){return $("#to-instrument option:selected").text()}},{key:"getTab",value:function(){return document.getElementById("out-tab").value}},{key:"formatFile",value:function(e,t,n,a){return"".concat(e,"\n").concat(t,"\n").concat(n,"\n\n").concat(a)}}]),e}();module.exports=TabSaver;

},{"core-js/modules/es.array.concat":68}],3:[function(require,module,exports){
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}var TabTransposer=require("./tab-transposer"),TabSaver=require("./tab-saver"),TabTransposerController=function(){function e(){_classCallCheck(this,e),this.inStrings=[this.noteToNumber("E",4),this.noteToNumber("B",3),this.noteToNumber("G",3),this.noteToNumber("D",3),this.noteToNumber("A",2),this.noteToNumber("E",2)],this.outStrings=[this.noteToNumber("E",5),this.noteToNumber("A",4),this.noteToNumber("D",4),this.noteToNumber("G",3)],this.octiveShift=0,this.keyShift=0,this.converted="",this.transposer=new TabTransposer,this.saver=new TabSaver,this.initButtons()}return _createClass(e,[{key:"initButtons",value:function(){document.getElementById("convert-button").onclick=this.generate.bind(this),document.getElementById("download-file-button").onclick=this.saver.save.bind(this.saver)}},{key:"generate",value:function(){this.octaveShift=this.getOctaveShift(),this.keyShift=this.getKeyShift(),this.inStrings=this.getInStrings(),this.outStrings=this.getOutStrings();var e=document.getElementById("in-tab").value;this.converted=this.transposer.transpose(e,this.inStrings,this.outStrings,this.octaveShift,this.keyShift),$("#out-tab").val(this.converted)}},{key:"getOctaveShift",value:function(){return parseInt(document.getElementById("octive-shift").value)}},{key:"getKeyShift",value:function(){return parseInt(document.getElementById("key-shift").value)}},{key:"getInStrings",value:function(){var e=document.getElementById("from-instrument").value;return this.chooseInstrument(e)}},{key:"getOutStrings",value:function(){var e=document.getElementById("to-instrument").value;return this.chooseInstrument(e)}},{key:"chooseInstrument",value:function(e){switch(e){case"guitar-standard":return[this.noteToNumber("E",4),this.noteToNumber("B",3),this.noteToNumber("G",3),this.noteToNumber("D",3),this.noteToNumber("A",2),this.noteToNumber("E",2)];case"guitar-drop-d":return[this.noteToNumber("E",4),this.noteToNumber("B",3),this.noteToNumber("G",3),this.noteToNumber("D",3),this.noteToNumber("A",2),this.noteToNumber("D",2)];case"guitar-half-down":return[this.noteToNumber("Eb",4),this.noteToNumber("Bb",3),this.noteToNumber("F#",3),this.noteToNumber("C#",3),this.noteToNumber("Ab",2),this.noteToNumber("Eb",2)];case"guitar-one-down":return[this.noteToNumber("D",4),this.noteToNumber("A",3),this.noteToNumber("F",3),this.noteToNumber("C",3),this.noteToNumber("G",2),this.noteToNumber("D",2)];case"mando-standard":case"mando-standard":return[this.noteToNumber("E",5),this.noteToNumber("A",4),this.noteToNumber("D",4),this.noteToNumber("G",3)];case"uku-standard":return[this.noteToNumber("G",4),this.noteToNumber("C",4),this.noteToNumber("E",4),this.noteToNumber("A",4)];case"banjo-standard":return[this.noteToNumber("G",4),this.noteToNumber("D",3),this.noteToNumber("G",3),this.noteToNumber("B",3),this.noteToNumber("D",4)]}}},{key:"noteToNumber",value:function(e,t){var r=0;switch(e){case"C":r=0;break;case"C#":r=1;break;case"D":r=2;break;case"Eb":r=3;break;case"E":r=4;break;case"F":r=5;break;case"F#":r=6;break;case"G":r=7;break;case"Ab":r=8;break;case"A":r=9;break;case"Bb":r=10;break;case"B":r=11}return r+12*t}},{key:"numberToNote",value:function(e){var t=0;switch(e%12){case 0:t="C";break;case 1:t="C#";break;case 2:t="D";break;case 3:t="Eb";break;case 4:t="E";break;case 5:t="F";break;case 6:t="F#";break;case 7:t="G";break;case 8:t="Ab";break;case 9:t="A";break;case 10:t="Bb";break;case 11:t="B"}return t}}]),e}();module.exports=TabTransposerController;

},{"./tab-saver":2,"./tab-transposer":4}],4:[function(require,module,exports){
"use strict";function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function _createClass(e,r,n){return r&&_defineProperties(e.prototype,r),n&&_defineProperties(e,n),e}require("core-js/modules/es.array.concat"),require("core-js/modules/es.regexp.exec"),require("core-js/modules/es.string.split");var TabTransposer=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"transpose",value:function(e,r,n,t,a){var i=e.split("\n"),o=this.initOutTab(n,i);return this.fillTab(i,[],r,n,o,t,a),this.reformTab(o,n)}},{key:"initOutTab",value:function(e,r){for(var n=new Array(e),t=0;t<e.length;t++)n[t]=this.initOutTabLine(t,r);return n}},{key:"initOutTabLine",value:function(e,r){var n=[],t=r[0].length;e<r.length&&(t=r[e].length);for(var a=0;a<t;a++)n[a]="-";return n}},{key:"fillTab",value:function(e,r,n,t,a,i,o){for(var l=0;l<e.length&&l<n.length;l++){r[l]=e[l];for(var s=0;s<r[l].length;s++){var u=parseInt(r[l][s]);if(!isNaN(u)&&null!=u){var c=u+n[l]+12*i+o,f=this.pickString(c,t);console.log(c+" "+f),a[f][s]=this.toFret(c,t[f])}}}}},{key:"reformTab",value:function(e,r){for(var n="",t=0;t<r.length;t++){for(var a=0;a<e[t].length;a++)n=n.concat(e[t][a]);n=n.concat("\n")}return n}},{key:"pickString",value:function(e,r){for(var n=0,t=1e5,a=0;a<r.length;a++){var i=e-r[a];i<t&&i>=0&&(n=a,t=i)}return n}},{key:"toFret",value:function(e,r){return e-r}}]),e}();module.exports=TabTransposer;

},{"core-js/modules/es.array.concat":68,"core-js/modules/es.regexp.exec":69,"core-js/modules/es.string.split":70}],5:[function(require,module,exports){
module.exports=function(n){if("function"!=typeof n)throw TypeError(String(n)+" is not a function");return n};

},{}],6:[function(require,module,exports){
"use strict";var charAt=require("../internals/string-multibyte").charAt;module.exports=function(t,r,e){return r+(e?charAt(t,r).length:1)};

},{"../internals/string-multibyte":58}],7:[function(require,module,exports){
var isObject=require("../internals/is-object");module.exports=function(r){if(!isObject(r))throw TypeError(String(r)+" is not an object");return r};

},{"../internals/is-object":34}],8:[function(require,module,exports){
var toIndexedObject=require("../internals/to-indexed-object"),toLength=require("../internals/to-length"),toAbsoluteIndex=require("../internals/to-absolute-index"),createMethod=function(e){return function(t,n,r){var o,i=toIndexedObject(t),d=toLength(i.length),u=toAbsoluteIndex(r,d);if(e&&n!=n){for(;d>u;)if((o=i[u++])!=o)return!0}else for(;d>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}};module.exports={includes:createMethod(!0),indexOf:createMethod(!1)};

},{"../internals/to-absolute-index":59,"../internals/to-indexed-object":60,"../internals/to-length":62}],9:[function(require,module,exports){
var fails=require("../internals/fails"),wellKnownSymbol=require("../internals/well-known-symbol"),V8_VERSION=require("../internals/engine-v8-version"),SPECIES=wellKnownSymbol("species");module.exports=function(n){return V8_VERSION>=51||!fails(function(){var e=[];return(e.constructor={})[SPECIES]=function(){return{foo:1}},1!==e[n](Boolean).foo})};

},{"../internals/engine-v8-version":19,"../internals/fails":22,"../internals/well-known-symbol":67}],10:[function(require,module,exports){
var isObject=require("../internals/is-object"),isArray=require("../internals/is-array"),wellKnownSymbol=require("../internals/well-known-symbol"),SPECIES=wellKnownSymbol("species");module.exports=function(r,e){var n;return isArray(r)&&("function"!=typeof(n=r.constructor)||n!==Array&&!isArray(n.prototype)?isObject(n)&&null===(n=n[SPECIES])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)};

},{"../internals/is-array":32,"../internals/is-object":34,"../internals/well-known-symbol":67}],11:[function(require,module,exports){
var toString={}.toString;module.exports=function(t){return toString.call(t).slice(8,-1)};

},{}],12:[function(require,module,exports){
var has=require("../internals/has"),ownKeys=require("../internals/own-keys"),getOwnPropertyDescriptorModule=require("../internals/object-get-own-property-descriptor"),definePropertyModule=require("../internals/object-define-property");module.exports=function(e,r){for(var o=ownKeys(r),t=definePropertyModule.f,n=getOwnPropertyDescriptorModule.f,i=0;i<o.length;i++){var s=o[i];has(e,s)||t(e,s,n(r,s))}};

},{"../internals/has":26,"../internals/object-define-property":39,"../internals/object-get-own-property-descriptor":40,"../internals/own-keys":45}],13:[function(require,module,exports){
var DESCRIPTORS=require("../internals/descriptors"),definePropertyModule=require("../internals/object-define-property"),createPropertyDescriptor=require("../internals/create-property-descriptor");module.exports=DESCRIPTORS?function(e,r,t){return definePropertyModule.f(e,r,createPropertyDescriptor(1,t))}:function(e,r,t){return e[r]=t,e};

},{"../internals/create-property-descriptor":14,"../internals/descriptors":16,"../internals/object-define-property":39}],14:[function(require,module,exports){
module.exports=function(e,r){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:r}};

},{}],15:[function(require,module,exports){
"use strict";var toPrimitive=require("../internals/to-primitive"),definePropertyModule=require("../internals/object-define-property"),createPropertyDescriptor=require("../internals/create-property-descriptor");module.exports=function(e,r,t){var i=toPrimitive(r);i in e?definePropertyModule.f(e,i,createPropertyDescriptor(0,t)):e[i]=t};

},{"../internals/create-property-descriptor":14,"../internals/object-define-property":39,"../internals/to-primitive":64}],16:[function(require,module,exports){
var fails=require("../internals/fails");module.exports=!fails(function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]});

},{"../internals/fails":22}],17:[function(require,module,exports){
var global=require("../internals/global"),isObject=require("../internals/is-object"),document=global.document,EXISTS=isObject(document)&&isObject(document.createElement);module.exports=function(e){return EXISTS?document.createElement(e):{}};

},{"../internals/global":25,"../internals/is-object":34}],18:[function(require,module,exports){
var getBuiltIn=require("../internals/get-built-in");module.exports=getBuiltIn("navigator","userAgent")||"";

},{"../internals/get-built-in":24}],19:[function(require,module,exports){
var match,version,global=require("../internals/global"),userAgent=require("../internals/engine-user-agent"),process=global.process,versions=process&&process.versions,v8=versions&&versions.v8;v8?version=(match=v8.split("."))[0]+match[1]:userAgent&&(!(match=userAgent.match(/Edge\/(\d+)/))||match[1]>=74)&&(match=userAgent.match(/Chrome\/(\d+)/))&&(version=match[1]),module.exports=version&&+version;

},{"../internals/engine-user-agent":18,"../internals/global":25}],20:[function(require,module,exports){
module.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"];

},{}],21:[function(require,module,exports){
var global=require("../internals/global"),getOwnPropertyDescriptor=require("../internals/object-get-own-property-descriptor").f,createNonEnumerableProperty=require("../internals/create-non-enumerable-property"),redefine=require("../internals/redefine"),setGlobal=require("../internals/set-global"),copyConstructorProperties=require("../internals/copy-constructor-properties"),isForced=require("../internals/is-forced");module.exports=function(e,r){var o,t,n,i,a,l=e.target,s=e.global,p=e.stat;if(o=s?global:p?global[l]||setGlobal(l,{}):(global[l]||{}).prototype)for(t in r){if(i=r[t],n=e.noTargetGet?(a=getOwnPropertyDescriptor(o,t))&&a.value:o[t],!isForced(s?t:l+(p?".":"#")+t,e.forced)&&void 0!==n){if(typeof i==typeof n)continue;copyConstructorProperties(i,n)}(e.sham||n&&n.sham)&&createNonEnumerableProperty(i,"sham",!0),redefine(o,t,i,e)}};

},{"../internals/copy-constructor-properties":12,"../internals/create-non-enumerable-property":13,"../internals/global":25,"../internals/is-forced":33,"../internals/object-get-own-property-descriptor":40,"../internals/redefine":47,"../internals/set-global":53}],22:[function(require,module,exports){
module.exports=function(r){try{return!!r()}catch(r){return!0}};

},{}],23:[function(require,module,exports){
"use strict";require("../modules/es.regexp.exec");var redefine=require("../internals/redefine"),fails=require("../internals/fails"),wellKnownSymbol=require("../internals/well-known-symbol"),regexpExec=require("../internals/regexp-exec"),createNonEnumerableProperty=require("../internals/create-non-enumerable-property"),SPECIES=wellKnownSymbol("species"),REPLACE_SUPPORTS_NAMED_GROUPS=!fails(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),REPLACE_KEEPS_$0="$0"==="a".replace(/./,"$0"),REPLACE=wellKnownSymbol("replace"),REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE=!!/./[REPLACE]&&""===/./[REPLACE]("a","$0"),SPLIT_WORKS_WITH_OVERWRITTEN_EXEC=!fails(function(){var e=/(?:)/,r=e.exec;e.exec=function(){return r.apply(this,arguments)};var E="ab".split(e);return 2!==E.length||"a"!==E[0]||"b"!==E[1]});module.exports=function(e,r,E,n){var t=wellKnownSymbol(e),l=!fails(function(){var r={};return r[t]=function(){return 7},7!=""[e](r)}),a=l&&!fails(function(){var r=!1,E=/a/;return"split"===e&&((E={}).constructor={},E.constructor[SPECIES]=function(){return E},E.flags="",E[t]=/./[t]),E.exec=function(){return r=!0,null},E[t](""),!r});if(!l||!a||"replace"===e&&(!REPLACE_SUPPORTS_NAMED_GROUPS||!REPLACE_KEEPS_$0||REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE)||"split"===e&&!SPLIT_WORKS_WITH_OVERWRITTEN_EXEC){var o=/./[t],i=E(t,""[e],function(e,r,E,n,t){return r.exec===regexpExec?l&&!t?{done:!0,value:o.call(r,E,n)}:{done:!0,value:e.call(E,r,n)}:{done:!1}},{REPLACE_KEEPS_$0:REPLACE_KEEPS_$0,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE}),u=i[0],c=i[1];redefine(String.prototype,e,u),redefine(RegExp.prototype,t,2==r?function(e,r){return c.call(e,this,r)}:function(e){return c.call(e,this)})}n&&createNonEnumerableProperty(RegExp.prototype[t],"sham",!0)};

},{"../internals/create-non-enumerable-property":13,"../internals/fails":22,"../internals/redefine":47,"../internals/regexp-exec":49,"../internals/well-known-symbol":67,"../modules/es.regexp.exec":69}],24:[function(require,module,exports){
var path=require("../internals/path"),global=require("../internals/global"),aFunction=function(n){return"function"==typeof n?n:void 0};module.exports=function(n,t){return arguments.length<2?aFunction(path[n])||aFunction(global[n]):path[n]&&path[n][t]||global[n]&&global[n][t]};

},{"../internals/global":25,"../internals/path":46}],25:[function(require,module,exports){
(function (global){
var check=function(e){return e&&e.Math==Math&&e};module.exports=check("object"==typeof globalThis&&globalThis)||check("object"==typeof window&&window)||check("object"==typeof self&&self)||check("object"==typeof global&&global)||Function("return this")();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],26:[function(require,module,exports){
var hasOwnProperty={}.hasOwnProperty;module.exports=function(r,e){return hasOwnProperty.call(r,e)};

},{}],27:[function(require,module,exports){
module.exports={};

},{}],28:[function(require,module,exports){
var DESCRIPTORS=require("../internals/descriptors"),fails=require("../internals/fails"),createElement=require("../internals/document-create-element");module.exports=!DESCRIPTORS&&!fails(function(){return 7!=Object.defineProperty(createElement("div"),"a",{get:function(){return 7}}).a});

},{"../internals/descriptors":16,"../internals/document-create-element":17,"../internals/fails":22}],29:[function(require,module,exports){
var fails=require("../internals/fails"),classof=require("../internals/classof-raw"),split="".split;module.exports=fails(function(){return!Object("z").propertyIsEnumerable(0)})?function(r){return"String"==classof(r)?split.call(r,""):Object(r)}:Object;

},{"../internals/classof-raw":11,"../internals/fails":22}],30:[function(require,module,exports){
var store=require("../internals/shared-store"),functionToString=Function.toString;"function"!=typeof store.inspectSource&&(store.inspectSource=function(t){return functionToString.call(t)}),module.exports=store.inspectSource;

},{"../internals/shared-store":55}],31:[function(require,module,exports){
var set,get,has,NATIVE_WEAK_MAP=require("../internals/native-weak-map"),global=require("../internals/global"),isObject=require("../internals/is-object"),createNonEnumerableProperty=require("../internals/create-non-enumerable-property"),objectHas=require("../internals/has"),sharedKey=require("../internals/shared-key"),hiddenKeys=require("../internals/hidden-keys"),WeakMap=global.WeakMap,enforce=function(e){return has(e)?get(e):set(e,{})},getterFor=function(e){return function(r){var t;if(!isObject(r)||(t=get(r)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return t}};if(NATIVE_WEAK_MAP){var store=new WeakMap,wmget=store.get,wmhas=store.has,wmset=store.set;set=function(e,r){return wmset.call(store,e,r),r},get=function(e){return wmget.call(store,e)||{}},has=function(e){return wmhas.call(store,e)}}else{var STATE=sharedKey("state");hiddenKeys[STATE]=!0,set=function(e,r){return createNonEnumerableProperty(e,STATE,r),r},get=function(e){return objectHas(e,STATE)?e[STATE]:{}},has=function(e){return objectHas(e,STATE)}}module.exports={set:set,get:get,has:has,enforce:enforce,getterFor:getterFor};

},{"../internals/create-non-enumerable-property":13,"../internals/global":25,"../internals/has":26,"../internals/hidden-keys":27,"../internals/is-object":34,"../internals/native-weak-map":38,"../internals/shared-key":54}],32:[function(require,module,exports){
var classof=require("../internals/classof-raw");module.exports=Array.isArray||function(r){return"Array"==classof(r)};

},{"../internals/classof-raw":11}],33:[function(require,module,exports){
var fails=require("../internals/fails"),replacement=/#|\.prototype\./,isForced=function(e,r){var a=data[normalize(e)];return a==POLYFILL||a!=NATIVE&&("function"==typeof r?fails(r):!!r)},normalize=isForced.normalize=function(e){return String(e).replace(replacement,".").toLowerCase()},data=isForced.data={},NATIVE=isForced.NATIVE="N",POLYFILL=isForced.POLYFILL="P";module.exports=isForced;

},{"../internals/fails":22}],34:[function(require,module,exports){
module.exports=function(o){return"object"==typeof o?null!==o:"function"==typeof o};

},{}],35:[function(require,module,exports){
module.exports=!1;

},{}],36:[function(require,module,exports){
var isObject=require("../internals/is-object"),classof=require("../internals/classof-raw"),wellKnownSymbol=require("../internals/well-known-symbol"),MATCH=wellKnownSymbol("match");module.exports=function(e){var l;return isObject(e)&&(void 0!==(l=e[MATCH])?!!l:"RegExp"==classof(e))};

},{"../internals/classof-raw":11,"../internals/is-object":34,"../internals/well-known-symbol":67}],37:[function(require,module,exports){
var fails=require("../internals/fails");module.exports=!!Object.getOwnPropertySymbols&&!fails(function(){return!String(Symbol())});

},{"../internals/fails":22}],38:[function(require,module,exports){
var global=require("../internals/global"),inspectSource=require("../internals/inspect-source"),WeakMap=global.WeakMap;module.exports="function"==typeof WeakMap&&/native code/.test(inspectSource(WeakMap));

},{"../internals/global":25,"../internals/inspect-source":30}],39:[function(require,module,exports){
var DESCRIPTORS=require("../internals/descriptors"),IE8_DOM_DEFINE=require("../internals/ie8-dom-define"),anObject=require("../internals/an-object"),toPrimitive=require("../internals/to-primitive"),nativeDefineProperty=Object.defineProperty;exports.f=DESCRIPTORS?nativeDefineProperty:function(e,r,t){if(anObject(e),r=toPrimitive(r,!0),anObject(t),IE8_DOM_DEFINE)try{return nativeDefineProperty(e,r,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(e[r]=t.value),e};

},{"../internals/an-object":7,"../internals/descriptors":16,"../internals/ie8-dom-define":28,"../internals/to-primitive":64}],40:[function(require,module,exports){
var DESCRIPTORS=require("../internals/descriptors"),propertyIsEnumerableModule=require("../internals/object-property-is-enumerable"),createPropertyDescriptor=require("../internals/create-property-descriptor"),toIndexedObject=require("../internals/to-indexed-object"),toPrimitive=require("../internals/to-primitive"),has=require("../internals/has"),IE8_DOM_DEFINE=require("../internals/ie8-dom-define"),nativeGetOwnPropertyDescriptor=Object.getOwnPropertyDescriptor;exports.f=DESCRIPTORS?nativeGetOwnPropertyDescriptor:function(e,r){if(e=toIndexedObject(e),r=toPrimitive(r,!0),IE8_DOM_DEFINE)try{return nativeGetOwnPropertyDescriptor(e,r)}catch(e){}if(has(e,r))return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(e,r),e[r])};

},{"../internals/create-property-descriptor":14,"../internals/descriptors":16,"../internals/has":26,"../internals/ie8-dom-define":28,"../internals/object-property-is-enumerable":44,"../internals/to-indexed-object":60,"../internals/to-primitive":64}],41:[function(require,module,exports){
var internalObjectKeys=require("../internals/object-keys-internal"),enumBugKeys=require("../internals/enum-bug-keys"),hiddenKeys=enumBugKeys.concat("length","prototype");exports.f=Object.getOwnPropertyNames||function(e){return internalObjectKeys(e,hiddenKeys)};

},{"../internals/enum-bug-keys":20,"../internals/object-keys-internal":43}],42:[function(require,module,exports){
exports.f=Object.getOwnPropertySymbols;

},{}],43:[function(require,module,exports){
var has=require("../internals/has"),toIndexedObject=require("../internals/to-indexed-object"),indexOf=require("../internals/array-includes").indexOf,hiddenKeys=require("../internals/hidden-keys");module.exports=function(e,n){var r,i=toIndexedObject(e),d=0,s=[];for(r in i)!has(hiddenKeys,r)&&has(i,r)&&s.push(r);for(;n.length>d;)has(i,r=n[d++])&&(~indexOf(s,r)||s.push(r));return s};

},{"../internals/array-includes":8,"../internals/has":26,"../internals/hidden-keys":27,"../internals/to-indexed-object":60}],44:[function(require,module,exports){
"use strict";var nativePropertyIsEnumerable={}.propertyIsEnumerable,getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor,NASHORN_BUG=getOwnPropertyDescriptor&&!nativePropertyIsEnumerable.call({1:2},1);exports.f=NASHORN_BUG?function(r){var e=getOwnPropertyDescriptor(this,r);return!!e&&e.enumerable}:nativePropertyIsEnumerable;

},{}],45:[function(require,module,exports){
var getBuiltIn=require("../internals/get-built-in"),getOwnPropertyNamesModule=require("../internals/object-get-own-property-names"),getOwnPropertySymbolsModule=require("../internals/object-get-own-property-symbols"),anObject=require("../internals/an-object");module.exports=getBuiltIn("Reflect","ownKeys")||function(e){var t=getOwnPropertyNamesModule.f(anObject(e)),r=getOwnPropertySymbolsModule.f;return r?t.concat(r(e)):t};

},{"../internals/an-object":7,"../internals/get-built-in":24,"../internals/object-get-own-property-names":41,"../internals/object-get-own-property-symbols":42}],46:[function(require,module,exports){
var global=require("../internals/global");module.exports=global;

},{"../internals/global":25}],47:[function(require,module,exports){
var global=require("../internals/global"),createNonEnumerableProperty=require("../internals/create-non-enumerable-property"),has=require("../internals/has"),setGlobal=require("../internals/set-global"),inspectSource=require("../internals/inspect-source"),InternalStateModule=require("../internals/internal-state"),getInternalState=InternalStateModule.get,enforceInternalState=InternalStateModule.enforce,TEMPLATE=String(String).split("String");(module.exports=function(e,t,n,r){var a=!!r&&!!r.unsafe,o=!!r&&!!r.enumerable,l=!!r&&!!r.noTargetGet;"function"==typeof n&&("string"!=typeof t||has(n,"name")||createNonEnumerableProperty(n,"name",t),enforceInternalState(n).source=TEMPLATE.join("string"==typeof t?t:"")),e!==global?(a?!l&&e[t]&&(o=!0):delete e[t],o?e[t]=n:createNonEnumerableProperty(e,t,n)):o?e[t]=n:setGlobal(t,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&getInternalState(this).source||inspectSource(this)});

},{"../internals/create-non-enumerable-property":13,"../internals/global":25,"../internals/has":26,"../internals/inspect-source":30,"../internals/internal-state":31,"../internals/set-global":53}],48:[function(require,module,exports){
var classof=require("./classof-raw"),regexpExec=require("./regexp-exec");module.exports=function(e,r){var o=e.exec;if("function"==typeof o){var c=o.call(e,r);if("object"!=typeof c)throw TypeError("RegExp exec method returned something other than an Object or null");return c}if("RegExp"!==classof(e))throw TypeError("RegExp#exec called on incompatible receiver");return regexpExec.call(e,r)};

},{"./classof-raw":11,"./regexp-exec":49}],49:[function(require,module,exports){
"use strict";var regexpFlags=require("./regexp-flags"),stickyHelpers=require("./regexp-sticky-helpers"),nativeExec=RegExp.prototype.exec,nativeReplace=String.prototype.replace,patchedExec=nativeExec,UPDATES_LAST_INDEX_WRONG=function(){var e=/a/,t=/b*/g;return nativeExec.call(e,"a"),nativeExec.call(t,"a"),0!==e.lastIndex||0!==t.lastIndex}(),UNSUPPORTED_Y=stickyHelpers.UNSUPPORTED_Y||stickyHelpers.BROKEN_CARET,NPCG_INCLUDED=void 0!==/()??/.exec("")[1],PATCH=UPDATES_LAST_INDEX_WRONG||NPCG_INCLUDED||UNSUPPORTED_Y;PATCH&&(patchedExec=function(e){var t,l,n,a,i=this,c=UNSUPPORTED_Y&&i.sticky,s=regexpFlags.call(i),x=i.source,r=0,E=e;return c&&(-1===(s=s.replace("y","")).indexOf("g")&&(s+="g"),E=String(e).slice(i.lastIndex),i.lastIndex>0&&(!i.multiline||i.multiline&&"\n"!==e[i.lastIndex-1])&&(x="(?: "+x+")",E=" "+E,r++),l=new RegExp("^(?:"+x+")",s)),NPCG_INCLUDED&&(l=new RegExp("^"+x+"$(?!\\s)",s)),UPDATES_LAST_INDEX_WRONG&&(t=i.lastIndex),n=nativeExec.call(c?l:i,E),c?n?(n.input=n.input.slice(r),n[0]=n[0].slice(r),n.index=i.lastIndex,i.lastIndex+=n[0].length):i.lastIndex=0:UPDATES_LAST_INDEX_WRONG&&n&&(i.lastIndex=i.global?n.index+n[0].length:t),NPCG_INCLUDED&&n&&n.length>1&&nativeReplace.call(n[0],l,function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(n[a]=void 0)}),n}),module.exports=patchedExec;

},{"./regexp-flags":50,"./regexp-sticky-helpers":51}],50:[function(require,module,exports){
"use strict";var anObject=require("../internals/an-object");module.exports=function(){var e=anObject(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t};

},{"../internals/an-object":7}],51:[function(require,module,exports){
"use strict";var fails=require("./fails");function RE(r,e){return RegExp(r,e)}exports.UNSUPPORTED_Y=fails(function(){var r=RE("a","y");return r.lastIndex=2,null!=r.exec("abcd")}),exports.BROKEN_CARET=fails(function(){var r=RE("^r","gy");return r.lastIndex=2,null!=r.exec("str")});

},{"./fails":22}],52:[function(require,module,exports){
module.exports=function(o){if(null==o)throw TypeError("Can't call method on "+o);return o};

},{}],53:[function(require,module,exports){
var global=require("../internals/global"),createNonEnumerableProperty=require("../internals/create-non-enumerable-property");module.exports=function(e,r){try{createNonEnumerableProperty(global,e,r)}catch(a){global[e]=r}return r};

},{"../internals/create-non-enumerable-property":13,"../internals/global":25}],54:[function(require,module,exports){
var shared=require("../internals/shared"),uid=require("../internals/uid"),keys=shared("keys");module.exports=function(e){return keys[e]||(keys[e]=uid(e))};

},{"../internals/shared":56,"../internals/uid":65}],55:[function(require,module,exports){
var global=require("../internals/global"),setGlobal=require("../internals/set-global"),SHARED="__core-js_shared__",store=global[SHARED]||setGlobal(SHARED,{});module.exports=store;

},{"../internals/global":25,"../internals/set-global":53}],56:[function(require,module,exports){
var IS_PURE=require("../internals/is-pure"),store=require("../internals/shared-store");(module.exports=function(r,e){return store[r]||(store[r]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.4",mode:IS_PURE?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"});

},{"../internals/is-pure":35,"../internals/shared-store":55}],57:[function(require,module,exports){
var anObject=require("../internals/an-object"),aFunction=require("../internals/a-function"),wellKnownSymbol=require("../internals/well-known-symbol"),SPECIES=wellKnownSymbol("species");module.exports=function(n,e){var o,r=anObject(n).constructor;return void 0===r||null==(o=anObject(r)[SPECIES])?e:aFunction(o)};

},{"../internals/a-function":5,"../internals/an-object":7,"../internals/well-known-symbol":67}],58:[function(require,module,exports){
var toInteger=require("../internals/to-integer"),requireObjectCoercible=require("../internals/require-object-coercible"),createMethod=function(e){return function(r,t){var c,o,i=String(requireObjectCoercible(r)),n=toInteger(t),a=i.length;return n<0||n>=a?e?"":void 0:(c=i.charCodeAt(n))<55296||c>56319||n+1===a||(o=i.charCodeAt(n+1))<56320||o>57343?e?i.charAt(n):c:e?i.slice(n,n+2):o-56320+(c-55296<<10)+65536}};module.exports={codeAt:createMethod(!1),charAt:createMethod(!0)};

},{"../internals/require-object-coercible":52,"../internals/to-integer":61}],59:[function(require,module,exports){
var toInteger=require("../internals/to-integer"),max=Math.max,min=Math.min;module.exports=function(e,t){var n=toInteger(e);return n<0?max(n+t,0):min(n,t)};

},{"../internals/to-integer":61}],60:[function(require,module,exports){
var IndexedObject=require("../internals/indexed-object"),requireObjectCoercible=require("../internals/require-object-coercible");module.exports=function(e){return IndexedObject(requireObjectCoercible(e))};

},{"../internals/indexed-object":29,"../internals/require-object-coercible":52}],61:[function(require,module,exports){
var ceil=Math.ceil,floor=Math.floor;module.exports=function(o){return isNaN(o=+o)?0:(o>0?floor:ceil)(o)};

},{}],62:[function(require,module,exports){
var toInteger=require("../internals/to-integer"),min=Math.min;module.exports=function(e){return e>0?min(toInteger(e),9007199254740991):0};

},{"../internals/to-integer":61}],63:[function(require,module,exports){
var requireObjectCoercible=require("../internals/require-object-coercible");module.exports=function(e){return Object(requireObjectCoercible(e))};

},{"../internals/require-object-coercible":52}],64:[function(require,module,exports){
var isObject=require("../internals/is-object");module.exports=function(t,e){if(!isObject(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!isObject(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!isObject(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!isObject(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")};

},{"../internals/is-object":34}],65:[function(require,module,exports){
var id=0,postfix=Math.random();module.exports=function(o){return"Symbol("+String(void 0===o?"":o)+")_"+(++id+postfix).toString(36)};

},{}],66:[function(require,module,exports){
var NATIVE_SYMBOL=require("../internals/native-symbol");module.exports=NATIVE_SYMBOL&&!Symbol.sham&&"symbol"==typeof Symbol.iterator;

},{"../internals/native-symbol":37}],67:[function(require,module,exports){
var global=require("../internals/global"),shared=require("../internals/shared"),has=require("../internals/has"),uid=require("../internals/uid"),NATIVE_SYMBOL=require("../internals/native-symbol"),USE_SYMBOL_AS_UID=require("../internals/use-symbol-as-uid"),WellKnownSymbolsStore=shared("wks"),Symbol=global.Symbol,createWellKnownSymbol=USE_SYMBOL_AS_UID?Symbol:Symbol&&Symbol.withoutSetter||uid;module.exports=function(e){return has(WellKnownSymbolsStore,e)||(NATIVE_SYMBOL&&has(Symbol,e)?WellKnownSymbolsStore[e]=Symbol[e]:WellKnownSymbolsStore[e]=createWellKnownSymbol("Symbol."+e)),WellKnownSymbolsStore[e]};

},{"../internals/global":25,"../internals/has":26,"../internals/native-symbol":37,"../internals/shared":56,"../internals/uid":65,"../internals/use-symbol-as-uid":66}],68:[function(require,module,exports){
"use strict";var $=require("../internals/export"),fails=require("../internals/fails"),isArray=require("../internals/is-array"),isObject=require("../internals/is-object"),toObject=require("../internals/to-object"),toLength=require("../internals/to-length"),createProperty=require("../internals/create-property"),arraySpeciesCreate=require("../internals/array-species-create"),arrayMethodHasSpeciesSupport=require("../internals/array-method-has-species-support"),wellKnownSymbol=require("../internals/well-known-symbol"),V8_VERSION=require("../internals/engine-v8-version"),IS_CONCAT_SPREADABLE=wellKnownSymbol("isConcatSpreadable"),MAX_SAFE_INTEGER=9007199254740991,MAXIMUM_ALLOWED_INDEX_EXCEEDED="Maximum allowed index exceeded",IS_CONCAT_SPREADABLE_SUPPORT=V8_VERSION>=51||!fails(function(){var e=[];return e[IS_CONCAT_SPREADABLE]=!1,e.concat()[0]!==e}),SPECIES_SUPPORT=arrayMethodHasSpeciesSupport("concat"),isConcatSpreadable=function(e){if(!isObject(e))return!1;var r=e[IS_CONCAT_SPREADABLE];return void 0!==r?!!r:isArray(e)},FORCED=!IS_CONCAT_SPREADABLE_SUPPORT||!SPECIES_SUPPORT;$({target:"Array",proto:!0,forced:FORCED},{concat:function(e){var r,t,a,i,n,E=toObject(this),o=arraySpeciesCreate(E,0),s=0;for(r=-1,a=arguments.length;r<a;r++)if(n=-1===r?E:arguments[r],isConcatSpreadable(n)){if(s+(i=toLength(n.length))>MAX_SAFE_INTEGER)throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);for(t=0;t<i;t++,s++)t in n&&createProperty(o,s,n[t])}else{if(s>=MAX_SAFE_INTEGER)throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);createProperty(o,s++,n)}return o.length=s,o}});

},{"../internals/array-method-has-species-support":9,"../internals/array-species-create":10,"../internals/create-property":15,"../internals/engine-v8-version":19,"../internals/export":21,"../internals/fails":22,"../internals/is-array":32,"../internals/is-object":34,"../internals/to-length":62,"../internals/to-object":63,"../internals/well-known-symbol":67}],69:[function(require,module,exports){
"use strict";var $=require("../internals/export"),exec=require("../internals/regexp-exec");$({target:"RegExp",proto:!0,forced:/./.exec!==exec},{exec:exec});

},{"../internals/export":21,"../internals/regexp-exec":49}],70:[function(require,module,exports){
"use strict";var fixRegExpWellKnownSymbolLogic=require("../internals/fix-regexp-well-known-symbol-logic"),isRegExp=require("../internals/is-regexp"),anObject=require("../internals/an-object"),requireObjectCoercible=require("../internals/require-object-coercible"),speciesConstructor=require("../internals/species-constructor"),advanceStringIndex=require("../internals/advance-string-index"),toLength=require("../internals/to-length"),callRegExpExec=require("../internals/regexp-exec-abstract"),regexpExec=require("../internals/regexp-exec"),fails=require("../internals/fails"),arrayPush=[].push,min=Math.min,MAX_UINT32=4294967295,SUPPORTS_Y=!fails(function(){return!RegExp(MAX_UINT32,"y")});fixRegExpWellKnownSymbolLogic("split",2,function(e,n,i){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,i){var r=String(requireObjectCoercible(this)),t=void 0===i?MAX_UINT32:i>>>0;if(0===t)return[];if(void 0===e)return[r];if(!isRegExp(e))return n.call(r,e,t);for(var l,s,c,u=[],a=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),g=0,o=new RegExp(e.source,a+"g");(l=regexpExec.call(o,r))&&!((s=o.lastIndex)>g&&(u.push(r.slice(g,l.index)),l.length>1&&l.index<r.length&&arrayPush.apply(u,l.slice(1)),c=l[0].length,g=s,u.length>=t));)o.lastIndex===l.index&&o.lastIndex++;return g===r.length?!c&&o.test("")||u.push(""):u.push(r.slice(g)),u.length>t?u.slice(0,t):u}:"0".split(void 0,0).length?function(e,i){return void 0===e&&0===i?[]:n.call(this,e,i)}:n,[function(n,i){var t=requireObjectCoercible(this),l=null==n?void 0:n[e];return void 0!==l?l.call(n,t,i):r.call(String(t),n,i)},function(e,t){var l=i(r,e,this,t,r!==n);if(l.done)return l.value;var s=anObject(e),c=String(this),u=speciesConstructor(s,RegExp),a=s.unicode,g=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(SUPPORTS_Y?"y":"g"),o=new u(SUPPORTS_Y?s:"^(?:"+s.source+")",g),x=void 0===t?MAX_UINT32:t>>>0;if(0===x)return[];if(0===c.length)return null===callRegExpExec(o,c)?[c]:[];for(var h=0,p=0,d=[];p<c.length;){o.lastIndex=SUPPORTS_Y?p:0;var f,v=callRegExpExec(o,SUPPORTS_Y?c:c.slice(p));if(null===v||(f=min(toLength(o.lastIndex+(SUPPORTS_Y?0:p)),c.length))===h)p=advanceStringIndex(c,p,a);else{if(d.push(c.slice(h,p)),d.length===x)return d;for(var S=1;S<=v.length-1;S++)if(d.push(v[S]),d.length===x)return d;p=h=f}}return d.push(c.slice(h)),d}]},!SUPPORTS_Y);

},{"../internals/advance-string-index":6,"../internals/an-object":7,"../internals/fails":22,"../internals/fix-regexp-well-known-symbol-logic":23,"../internals/is-regexp":36,"../internals/regexp-exec":49,"../internals/regexp-exec-abstract":48,"../internals/require-object-coercible":52,"../internals/species-constructor":57,"../internals/to-length":62}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
